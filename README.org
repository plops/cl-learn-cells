# Intro to cells

- http://stefano.dissegna.me/cells-tutorial.html

* a ruled cell

`defmodel`
`:initform (c? .. self ..)`
`:unchanged-if #'equal`

`(cells-reset)`

* family
`defmodel <node-name> (<family>)`

`make-instance '<node-name> :val (c? ..) :kids (c? (the-kids (make-kid '<node-name> :md-name ...`

* observer

`defobserver <slot-name> [self [old-value [new-value [old-value-boundp]]]]`


* lazy cells

evaluate when needed

`:once-asked` evaluated first time and when read by application code

`:until-asked` becomes unlazy after asked by application code the first time

`:always` only evaluated when read


|              | eval during creation | when dependencies change | upon read |
|--------------+----------------------+--------------------------+-----------|
| non-lazy     | y                    | y                        | n         |
| :once-asked  | y                    | n                        | y         |
| :until-asked | n                    | y                        | n (?)     |
| :always      | n                    | n                        | y         |
